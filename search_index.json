[
["index.html", "Advent of Code 2018 Technical details", " Advent of Code 2018 María Paula Caldas 2019-01-17 Technical details I tried to solve this using packages from the tidyverse. My setup at the time: ## Session info ------------------------------------------------------------- ## setting value ## version R version 3.5.1 (2018-07-02) ## system x86_64, darwin15.6.0 ## ui RStudio (1.2.1181) ## language (EN) ## collate en_US.UTF-8 ## tz Europe/Paris ## date 2019-01-17 ## Packages ----------------------------------------------------------------- ## package * version date source ## assertthat 0.2.0 2017-04-11 CRAN (R 3.5.0) ## backports 1.1.2 2017-12-13 CRAN (R 3.5.0) ## base * 3.5.1 2018-07-05 local ## bindr 0.1.1 2018-03-13 CRAN (R 3.5.0) ## bindrcpp * 0.2.2 2018-03-29 CRAN (R 3.5.0) ## bookdown 0.8 2018-12-03 cran (@0.8) ## broom 0.5.0 2018-07-17 CRAN (R 3.5.0) ## cellranger 1.1.0 2016-07-27 CRAN (R 3.5.0) ## cli 1.0.0 2017-11-05 CRAN (R 3.5.0) ## colorspace 1.3-2 2016-12-14 CRAN (R 3.5.0) ## compiler 3.5.1 2018-07-05 local ## crayon 1.3.4 2017-09-16 CRAN (R 3.5.0) ## datasets * 3.5.1 2018-07-05 local ## devtools 1.13.5 2018-02-18 CRAN (R 3.5.0) ## digest 0.6.16 2018-08-22 cran (@0.6.16) ## dplyr * 0.7.6 2018-06-29 CRAN (R 3.5.1) ## evaluate 0.12 2018-10-09 cran (@0.12) ## forcats * 0.3.0 2018-02-19 CRAN (R 3.5.0) ## ggplot2 * 3.0.0 2018-07-03 CRAN (R 3.5.0) ## glue 1.3.0 2018-07-17 cran (@1.3.0) ## graphics * 3.5.1 2018-07-05 local ## grDevices * 3.5.1 2018-07-05 local ## grid 3.5.1 2018-07-05 local ## gtable 0.2.0 2016-02-26 CRAN (R 3.5.0) ## haven 1.1.2 2018-06-27 CRAN (R 3.5.0) ## hms 0.4.2 2018-03-10 CRAN (R 3.5.0) ## htmltools 0.3.6 2017-04-28 CRAN (R 3.5.0) ## httr 1.3.1 2017-08-20 CRAN (R 3.5.0) ## jsonlite 1.6 2018-12-07 cran (@1.6) ## knitr 1.20 2018-02-20 CRAN (R 3.5.0) ## lattice 0.20-35 2017-03-25 CRAN (R 3.5.1) ## lazyeval 0.2.1 2017-10-29 CRAN (R 3.5.0) ## lubridate * 1.7.4 2018-04-11 CRAN (R 3.5.0) ## magrittr 1.5 2014-11-22 CRAN (R 3.5.0) ## memoise 1.1.0 2017-04-21 CRAN (R 3.5.0) ## methods * 3.5.1 2018-07-05 local ## modelr 0.1.2 2018-05-11 CRAN (R 3.5.0) ## munsell 0.4.3 2016-02-13 CRAN (R 3.5.0) ## nlme 3.1-137 2018-04-07 CRAN (R 3.5.1) ## padr * 0.4.1 2018-06-26 CRAN (R 3.5.0) ## pillar 1.2.2 2018-04-26 CRAN (R 3.5.0) ## pkgconfig 2.0.1 2017-03-21 CRAN (R 3.5.0) ## plyr 1.8.4 2016-06-08 CRAN (R 3.5.0) ## purrr * 0.2.5 2018-05-29 CRAN (R 3.5.0) ## R6 2.2.2 2017-06-17 CRAN (R 3.5.0) ## Rcpp 0.12.16 2018-03-13 CRAN (R 3.5.0) ## readr * 1.1.1 2017-05-16 CRAN (R 3.5.0) ## readxl 1.1.0 2018-04-20 CRAN (R 3.5.0) ## rlang 0.2.2 2018-08-16 CRAN (R 3.5.0) ## rmarkdown 1.11 2018-12-08 cran (@1.11) ## rstudioapi 0.7 2017-09-07 CRAN (R 3.5.0) ## rvest 0.3.2 2016-06-17 CRAN (R 3.5.0) ## scales 0.5.0 2017-08-24 CRAN (R 3.5.0) ## stats * 3.5.1 2018-07-05 local ## stringi 1.1.7 2018-03-12 CRAN (R 3.5.0) ## stringr * 1.3.1 2018-05-10 CRAN (R 3.5.0) ## tibble * 1.4.2 2018-01-22 CRAN (R 3.5.0) ## tidyr * 0.8.1 2018-05-18 CRAN (R 3.5.0) ## tidyselect 0.2.4 2018-02-26 CRAN (R 3.5.0) ## tidyverse * 1.2.1 2017-11-14 CRAN (R 3.5.0) ## tools 3.5.1 2018-07-05 local ## utf8 1.1.3 2018-01-03 CRAN (R 3.5.0) ## utils * 3.5.1 2018-07-05 local ## withr 2.1.2 2018-03-15 CRAN (R 3.5.0) ## xfun 0.4 2018-10-23 cran (@0.4) ## xml2 1.2.0 2018-01-24 CRAN (R 3.5.0) ## yaml 2.2.0 2018-07-25 cran (@2.2.0) "],
["day1.html", "Day 1 Chronal Calibration Instructions 1.1 Starting with a frequency of zero, what is the resulting frequency after all of the changes in frequency have been applied? 1.2 What is the first frequency your device reaches twice? Failed attempts", " Day 1 Chronal Calibration Instructions “We’ve detected some temporal anomalies,” one of Santa’s Elves at the Temporal Anomaly Research and Detection Instrument Station tells you. She sounded pretty worried when she called you down here. “At 500-year intervals into the past, someone has been changing Santa’s history!” “The good news is that the changes won’t propagate to our time stream for another 25 days, and we have a device” - she attaches something to your wrist - “that will let you fix the changes with no such propagation delay. It’s configured to send you 500 years further into the past every few days; that was the best we could do on such short notice.” “The bad news is that we are detecting roughly fifty anomalies throughout time; the device will indicate fixed anomalies with stars. The other bad news is that we only have one device and you’re the best person for the job! Good lu–” She taps a button on the device and you suddenly feel like you’re falling. To save Christmas, you need to get all fifty stars by December 25th. Collect stars by solving puzzles. Two puzzles will be made available on each day in the advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck! After feeling like you’ve been falling for a few minutes, you look at the device’s tiny screen. “Error: Device must be calibrated before first use. Frequency drift detected. Cannot maintain destination lock.” Below the message, the device shows a sequence of changes in frequency (your puzzle input). A value like +6 means the current frequency increases by 6; a value like -3 means the current frequency decreases by 3. For example, if the device displays frequency changes of +1, -2, +3, +1, then starting from a frequency of zero, the following changes would occur: Current frequency 0, change of +1; resulting frequency 1. Current frequency 1, change of -2; resulting frequency -1. Current frequency -1, change of +3; resulting frequency 2. Current frequency 2, change of +1; resulting frequency 3. In this example, the resulting frequency is 3. Here are other example situations: +1, +1, +1 results in 3 +1, +1, -2 results in 0 -1, -2, -3 results in -6 Starting with a frequency of zero, what is the resulting frequency after all of the changes in frequency have been applied? You notice that the device repeats the same frequency change list over and over. To calibrate the device, you need to find the first frequency it reaches twice. For example, using the same list of changes above, the device would loop as follows: Current frequency 0, change of +1; resulting frequency 1. Current frequency 1, change of -2; resulting frequency -1. Current frequency -1, change of +3; resulting frequency 2. Current frequency 2, change of +1; resulting frequency 3. (At this point, the device continues from the start of the list.) Current frequency 3, change of +1; resulting frequency 4. Current frequency 4, change of -2; resulting frequency 2, which has already been seen. In this example, the first frequency reached twice is 2. Note that your device might need to repeat its list of frequency changes many times before a duplicate frequency is found, and that duplicates might be found while in the middle of processing the list. Here are other examples: +1, -1 first reaches 0 twice. +3, +3, +4, -2, -4 first reaches 10 twice. -6, +3, +8, +5, -6 first reaches 5 twice. +7, +7, -2, -7, -4 first reaches 14 twice. What is the first frequency your device reaches twice? 1.1 Starting with a frequency of zero, what is the resulting frequency after all of the changes in frequency have been applied? Import puzzle imput for the day: puzzle_input &lt;- as.numeric(readLines(&quot;data-raw/day1.txt&quot;, warn = FALSE)) Easy enough: sum(puzzle_input) ## [1] 472 1.2 What is the first frequency your device reaches twice? Let’s create a cute little tibble. (tib &lt;- tibble( input = puzzle_input, cumsum = cumsum(input), index = seq(1:length(input)) )) ## # A tibble: 1,000 x 3 ## input cumsum index ## &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 -16 -16 1 ## 2 12 -4 2 ## 3 -18 -22 3 ## 4 -1 -23 4 ## 5 5 -18 5 ## 6 -8 -26 6 ## 7 9 -17 7 ## 8 -15 -32 8 ## 9 12 -20 9 ## 10 6 -14 10 ## # ... with 990 more rows First, let see how many frequencies have been reached more than once (i.e. have duplicates). count(tib, cumsum, sort = TRUE) ## # A tibble: 1,000 x 2 ## cumsum n ## &lt;dbl&gt; &lt;int&gt; ## 1 -111 1 ## 2 -107 1 ## 3 -103 1 ## 4 -100 1 ## 5 -98 1 ## 6 -97 1 ## 7 -96 1 ## 8 -95 1 ## 9 -94 1 ## 10 -91 1 ## # ... with 990 more rows Apparently none… Maybe I should do it twice? tib2 &lt;- tibble( input = rep(puzzle_input, 2), cumsum = cumsum(input), index = seq(1:length(input)) ) tib2 %&gt;% count(cumsum) %&gt;% count(n) ## # A tibble: 1 x 2 ## n nn ## &lt;int&gt; &lt;int&gt; ## 1 1 2000 So no, need to do it more than twice. OK, let’s just keep making the vector bigger until at least one frequency is repeated. Also, let’s just go back to base R. growing_vector &lt;- puzzle_input while ( !any(duplicated(cumsum(growing_vector))) ) growing_vector &lt;- c(growing_vector, growing_vector) The new vector is 256 times the size of the original input vector. Now, let’s get the frequencies: cumsum_big_vector &lt;- cumsum(growing_vector) And the indices of those that are repeated: indx &lt;- duplicated(cumsum_big_vector) Which allows me to get the first frequency that is repeated twice: cumsum_big_vector[indx][1] ## [1] 66932 Failed attempts At first, I thought the correct answer was: growing_vector[indx][1] ## [1] 18 … which is in fact the change in frequency that leads to the first frequency that appears twice! "],
["day2.html", "Day 2 Inventory Management System Instructions 2.1 What is the checksum for your list of box IDs? 2.2 What letters are common between the two correct box IDs?", " Day 2 Inventory Management System Instructions You stop falling through time, catch your breath, and check the screen on the device. “Destination reached. Current Year: 1518. Current Location: North Pole Utility Closet 83N10.” You made it! Now, to find those anomalies. Outside the utility closet, you hear footsteps and a voice. “…I’m not sure either. But now that so many people have chimneys, maybe he could sneak in that way?” Another voice responds, “Actually, we’ve been working on a new kind of suit that would let him fit through tight spaces like that. But, I heard that a few days ago, they lost the prototype fabric, the design plans, everything! Nobody on the team can even seem to remember important details of the project!” “Wouldn’t they have had enough fabric to fill several boxes in the warehouse? They’d be stored together, so the box IDs should be similar. Too bad it would take forever to search the warehouse for two similar box IDs…” They walk too far away to hear any more. Late at night, you sneak to the warehouse - who knows what kinds of paradoxes you could cause if you were discovered - and use your fancy wrist device to quickly scan every box and produce a list of the likely candidates (your puzzle input). To make sure you didn’t miss any, you scan the likely candidate boxes again, counting the number that have an ID containing exactly two of any letter and then separately counting those with exactly three of any letter. You can multiply those two counts together to get a rudimentary checksum and compare it to what your device predicts. For example, if you see the following box IDs: abcdef contains no letters that appear exactly two or three times. bababc contains two a and three b, so it counts for both. abbcde contains two b, but no letter appears exactly three times. abcccd contains three c, but no letter appears exactly two times. aabcdd contains two a and two d, but it only counts once. abcdee contains two e. ababab contains three a and three b, but it only counts once. Of these box IDs, four of them contain a letter which appears exactly twice, and three of them contain a letter which appears exactly three times. Multiplying these together produces a checksum of 4 * 3 = 12. What is the checksum for your list of box IDs? Confident that your list of box IDs is complete, you’re ready to find the boxes full of prototype fabric. The boxes will have IDs which differ by exactly one character at the same position in both strings. For example, given the following box IDs: abcde fghij klmno pqrst fguij axcye wvxyz The IDs abcde and axcye are close, but they differ by two characters (the second and fourth). However, the IDs fghij and fguij differ by exactly one character, the third (h and u). Those must be the correct boxes. What letters are common between the two correct box IDs? (In the example above, this is found by removing the differing character from either ID, producing fgij.) 2.1 What is the checksum for your list of box IDs? Import puzzle imput for the day: puzzle_input &lt;- readLines(&quot;data-raw/day2.txt&quot;, warn = FALSE) any_rep &lt;- function(id, rep = c(2, 3)) { count_per_letter &lt;- map_int(letters, ~ str_count(id, .x)) any(count_per_letter == rep) } tibble( input = puzzle_input, any_twice = map_lgl(input, any_rep, rep = 2), any_thrice = map_lgl(input, any_rep, rep = 3) ) %&gt;% summarise(n_twice = sum(any_twice), n_thrice = sum(any_thrice)) %&gt;% mutate(cumcheck = n_twice * n_thrice) ## # A tibble: 1 x 3 ## n_twice n_thrice cumcheck ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 247 31 7657 2.2 What letters are common between the two correct box IDs? This one took me a while, but it taught me the following lessons: Never forget to vectorise functions, especially those that are going to go through a dplyr::mutate() purrr::cross_df() is awesome, although not the right tool for this type of problem (you end up with twice the number of combinations than needed) are_almost_same &lt;- function(vector1, vector2) { are_almost_same_ &lt;- function(string1, string2) { chars1 &lt;- str_split(string1, &quot;&quot;)[[1]] chars2 &lt;- str_split(string2, &quot;&quot;)[[1]] sum(chars1 == chars2) == 25 # length of character string - 1 } map2_lgl(vector1, vector2, are_almost_same_) } get_common_letters_ &lt;- function(string1, string2) { chars1 &lt;- str_split(string1, &quot;&quot;)[[1]] chars2 &lt;- str_split(string2, &quot;&quot;)[[1]] paste0(chars1[chars1 == chars2], collapse = &quot;&quot;) } puzzle_input %&gt;% list(x = ., y = .) %&gt;% cross_df(.filter = `==`) %&gt;% mutate(are_almost_same = are_almost_same(x, y)) %&gt;% filter(are_almost_same) %&gt;% slice(1) %&gt;% # because of the cross_df() {get_common_letters_(.$x, .$y)} ## [1] &quot;ivjhcadokeltwgsfsmqwrbnuy&quot; For future reference Comparing two character strings, word by word: test_input1 &lt;- str_split(puzzle_input[1], &quot;&quot;)[[1]] test_input2 &lt;- str_split(puzzle_input[2], &quot;&quot;)[[1]] test_input1 == test_input2 ## [1] TRUE TRUE FALSE TRUE TRUE FALSE FALSE TRUE TRUE TRUE TRUE ## [12] TRUE TRUE TRUE FALSE TRUE TRUE TRUE TRUE TRUE TRUE FALSE ## [23] TRUE TRUE TRUE TRUE Scaling it up: count_matching_chars &lt;- function(vector1, vector2) { count_matching_chars_ &lt;- function(string1, string2) { chars1 &lt;- str_split(string1, &quot;&quot;)[[1]] chars2 &lt;- str_split(string2, &quot;&quot;)[[1]] sum(chars1 == chars2) } # Don&#39;t forget to vectorise! map2_int(vector1, vector2, count_matching_chars_) } c(&quot;case&quot;, &quot;base&quot;, &quot;cata&quot;) %&gt;% list(x = ., y = .) %&gt;% cross_df(.filter = `==`) %&gt;% mutate(n_matching_chars = count_matching_chars(x, y)) ## # A tibble: 6 x 3 ## x y n_matching_chars ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 base case 3 ## 2 cata case 2 ## 3 case base 3 ## 4 cata base 1 ## 5 case cata 2 ## 6 base cata 1 "],
["day3.html", "Day 3 No Matter How You Slice It Instructions 3.1 How many square inches of fabric are within two or more claims? 3.2 What is the ID of the only claim that doesn’t overlap?", " Day 3 No Matter How You Slice It Instructions The Elves managed to locate the chimney-squeeze prototype fabric for Santa’s suit (thanks to someone who helpfully wrote its box IDs on the wall of the warehouse in the middle of the night). Unfortunately, anomalies are still affecting them - nobody can even agree on how to cut the fabric. The whole piece of fabric they’re working on is a very large square - at least 1000 inches on each side. Each Elf has made a claim about which area of fabric would be ideal for Santa’s suit. All claims have an ID and consist of a single rectangle with edges parallel to the edges of the fabric. Each claim’s rectangle is defined as follows: The number of inches between the left edge of the fabric and the left edge of the rectangle. The number of inches between the top edge of the fabric and the top edge of the rectangle. The width of the rectangle in inches. The height of the rectangle in inches. A claim like #123 @ 3,2: 5x4 means that claim ID 123 specifies a rectangle 3 inches from the left edge, 2 inches from the top edge, 5 inches wide, and 4 inches tall. Visually, it claims the square inches of fabric represented by # (and ignores the square inches of fabric represented by .) in the diagram below: ........... ........... ...#####... ...#####... ...#####... ...#####... ........... ........... ........... The problem is that many of the claims overlap, causing two or more claims to cover part of the same areas. For example, consider the following claims: #1 @ 1,3: 4x4 #2 @ 3,1: 4x4 #3 @ 5,5: 2x2 Visually, these claim the following areas: ........ ...2222. ...2222. .11XX22. .11XX22. .111133. .111133. ........ The four square inches marked with X are claimed by both 1 and 2. (Claim 3, while adjacent to the others, does not overlap either of them.) If the Elves all proceed with their own plans, none of them will have enough fabric. How many square inches of fabric are within two or more claims? Amidst the chaos, you notice that exactly one claim doesn’t overlap by even a single square inch of fabric with any other claim. If you can somehow draw attention to it, maybe the Elves will be able to make Santa’s suit after all! For example, in the claims above, only claim 3 is intact after all claims are made. What is the ID of the only claim that doesn’t overlap? 3.1 How many square inches of fabric are within two or more claims? Import puzzle imput for the day: puzzle_input &lt;- readLines(&quot;data-raw/day3.txt&quot;, warn = FALSE) First, I tried to recreate the example to test my functions. I translated the information of the strings into two cute little tibbles. #1 @ 1,3: 4x4 test1 &lt;- tibble( x_start = 1 + 1, x_end = 1 + 4, y_start = 3 + 1, y_end = 3 + 4 ) #2 @ 3,1: 4x4 test2 &lt;- tibble( x_start = 3 + 1, x_end = 3 + 4, y_start = 1 + 1, y_end = 1 + 4 ) I then created a function to build a matrix from the coordinates in my tibbles. create_matrix &lt;- function(x_start, x_end, y_start, y_end, dim = 9, ...) { out &lt;- matrix(nrow = dim, ncol = dim) for (i in seq_len(dim)) { for (j in seq_len(dim)) { i_in_x_domain &lt;- i &gt;= x_start &amp; i &lt;= x_end j_in_y_domain &lt;- j &gt;= y_start &amp; j &lt;= y_end value &lt;- 1 * (i_in_x_domain * j_in_y_domain) out[j,i] &lt;- value } } out } Once I had my matrices, it was just a matter of adding them up… a &lt;- pmap(test1, create_matrix)[[1]] b &lt;- pmap(test2, create_matrix)[[1]] (c &lt;- a + b) ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] ## [1,] 0 0 0 0 0 0 0 0 0 ## [2,] 0 0 0 1 1 1 1 0 0 ## [3,] 0 0 0 1 1 1 1 0 0 ## [4,] 0 1 1 2 2 1 1 0 0 ## [5,] 0 1 1 2 2 1 1 0 0 ## [6,] 0 1 1 1 1 0 0 0 0 ## [7,] 0 1 1 1 1 0 0 0 0 ## [8,] 0 0 0 0 0 0 0 0 0 ## [9,] 0 0 0 0 0 0 0 0 0 ..and counting the number of entries greater than 1. sum(c &gt; 1) ## [1] 4 The above steps can be piped as such: test &lt;- bind_rows(test1, test2) test %&gt;% pmap(create_matrix) %&gt;% reduce(`+`) %&gt;% {sum(. &gt; 1)} ## [1] 4 Although the logic is sound (and gives the right answer!), this approach takes quite a bit of time to compute. A better alternative would have been perhaps to create only one matrix and then recursively add up the entries. Here is the code I used to get the answer (i.e. 97218). df &lt;- tibble( input = puzzle_input, id = str_replace(input, &quot;(\\\\#.*) \\\\@.*&quot;, &quot;\\\\1&quot;), from_left = str_replace(input, &quot;.* (.*),.*&quot;, &quot;\\\\1&quot;), from_top = str_replace(input, &quot;.*,(.*):.*&quot;, &quot;\\\\1&quot;), width = str_replace(input, &quot;.*: (.*)x.*&quot;, &quot;\\\\1&quot;), height = str_replace(input, &quot;.*x(.*)&quot;, &quot;\\\\1&quot;) ) %&gt;% mutate_at(vars(from_left:height), as.numeric) %&gt;% mutate( x_start = from_left + 1, x_end = from_left + width, y_start = from_top + 1, y_end = from_top + height ) matrices &lt;- df %&gt;% {set_names(.$id)} %&gt;% pmap(create_matrix2, dim = 1000) # 9.2 Gb matrices %&gt;% reduce(`+`) %&gt;% {sum(. &gt; 1)} 3.2 What is the ID of the only claim that doesn’t overlap? Very easy, once all the matrices were created: # Name the list names(matrices) &lt;- df$id # Cases where there&#39;s no overlap matrix_wo_overlap &lt;- matrices %&gt;% reduce(`+`) %&gt;% {1 * (. == 1)} # Keep only the matrices with entries overlapping those of matrix_wo_overlap matrices %&gt;% keep(~ all(.x &lt;= matrix_wo_overlap &amp; .x &gt;= 0)) %&gt;% names() Which gives lucky #717! "],
["day4.html", "Day 4 Repose Record Instructions 4.1 What is the ID of the guard you chose multiplied by the minute you chose? 4.2 Of all guards, which guard is most frequently asleep on the same minute?", " Day 4 Repose Record Instructions You’ve sneaked into another supply closet - this time, it’s across from the prototype suit manufacturing lab. You need to sneak inside and fix the issues with the suit, but there’s a guard stationed outside the lab, so this is as close as you can safely get. As you search the closet for anything that might help, you discover that you’re not the first person to want to sneak in. Covering the walls, someone has spent an hour starting every midnight for the past few months secretly observing this guard post! They’ve been writing down the ID of the one guard on duty that night - the Elves seem to have decided that one guard was enough for the overnight shift - as well as when they fall asleep or wake up while at their post (your puzzle input). For example, consider the following records, which have already been organized into chronological order: [1518-11-01 00:00] Guard #10 begins shift [1518-11-01 00:05] falls asleep [1518-11-01 00:25] wakes up [1518-11-01 00:30] falls asleep [1518-11-01 00:55] wakes up [1518-11-01 23:58] Guard #99 begins shift [1518-11-02 00:40] falls asleep [1518-11-02 00:50] wakes up [1518-11-03 00:05] Guard #10 begins shift [1518-11-03 00:24] falls asleep [1518-11-03 00:29] wakes up [1518-11-04 00:02] Guard #99 begins shift [1518-11-04 00:36] falls asleep [1518-11-04 00:46] wakes up [1518-11-05 00:03] Guard #99 begins shift [1518-11-05 00:45] falls asleep [1518-11-05 00:55] wakes up Timestamps are written using year-month-day hour:minute format. The guard falling asleep or waking up is always the one whose shift most recently started. Because all asleep/awake times are during the midnight hour (00:00 - 00:59), only the minute portion (00 - 59) is relevant for those events. Visually, these records show that the guards are asleep at these times: Date ID Minute 000000000011111111112222222222333333333344444444445555555555 012345678901234567890123456789012345678901234567890123456789 11-01 #10 .....####################.....#########################..... 11-02 #99 ........................................##########.......... 11-03 #10 ........................#####............................... 11-04 #99 ....................................##########.............. 11-05 #99 .............................................##########..... The columns are Date, which shows the month-day portion of the relevant day; ID, which shows the guard on duty that day; and Minute, which shows the minutes during which the guard was asleep within the midnight hour. (The Minute column’s header shows the minute’s ten’s digit in the first row and the one’s digit in the second row.) Awake is shown as ., and asleep is shown as #. Note that guards count as asleep on the minute they fall asleep, and they count as awake on the minute they wake up. For example, because Guard #10 wakes up at 00:25 on 1518-11-01, minute 25 is marked as awake. If you can figure out the guard most likely to be asleep at a specific time, you might be able to trick that guard into working tonight so you can have the best chance of sneaking in. You have two strategies for choosing the best guard/minute combination. Strategy 1: Find the guard that has the most minutes asleep. What minute does that guard spend asleep the most? In the example above, Guard #10 spent the most minutes asleep, a total of 50 minutes (20+25+5), while Guard #99 only slept for a total of 30 minutes (10+10+10). Guard #10 was asleep most during minute 24 (on two days, whereas any other minute the guard was asleep was only seen on one day). While this example listed the entries in chronological order, your entries are in the order you found them. You’ll need to organize them before they can be analyzed. What is the ID of the guard you chose multiplied by the minute you chose? (In the above example, the answer would be 10 * 24 = 240.) Strategy 2: Of all guards, which guard is most frequently asleep on the same minute? In the example above, Guard #99 spent minute 45 asleep more than any other guard or minute - three times in total. (In all other cases, any guard spent any minute asleep at most twice.) What is the ID of the guard you chose multiplied by the minute you chose? (In the above example, the answer would be 99 * 45 = 4455.) 4.1 What is the ID of the guard you chose multiplied by the minute you chose? This type, I load up a couple more packages: library(lubridate) library(padr) Import puzzle imput for the day: puzzle_input &lt;- readLines(&quot;data-raw/day4.txt&quot;, warn = FALSE) Do some cleaning: df &lt;- tibble( input = puzzle_input, date_time = ymd_hm(str_replace(input, &quot;\\\\[(.*)\\\\].*&quot;, &quot;\\\\1&quot;)), day = day(date_time), month = month(date_time), hour = hour(date_time), minute = minute(date_time), begins = str_detect(input, &quot;begins shift&quot;), asleep = str_detect(input, &quot;asleep&quot;), woke = !asleep, guard = input %&gt;% str_extract(&quot;#\\\\d*&quot;) %&gt;% str_remove(&quot;#&quot;) %&gt;% as.numeric() ) %&gt;% arrange(date_time) %&gt;% fill(guard) padded_df &lt;- df %&gt;% filter(!begins) %&gt;% select(date_time, day, asleep, woke, guard) %&gt;% group_by(day, guard) %&gt;% padr::pad() %&gt;% ungroup() %&gt;% fill(woke, asleep) %&gt;% filter(!woke) Guard that sleeps the most: (sleepiest &lt;- padded_df %&gt;% count(guard, sort = TRUE) %&gt;% top_n(1)) ## # A tibble: 1 x 2 ## guard n ## &lt;dbl&gt; &lt;int&gt; ## 1 2351 520 Most minutes guard is asleep: padded_df2 &lt;- df %&gt;% filter(!begins, guard == sleepiest$guard) %&gt;% select(date_time, day, asleep, woke) %&gt;% group_by(day) %&gt;% padr::pad() %&gt;% ungroup() %&gt;% fill(woke, asleep) %&gt;% filter(!woke) %&gt;% mutate(minute = minute(date_time)) (sleepiest_time &lt;- padded_df2 %&gt;% count(minute, sort = TRUE) %&gt;% top_n(1)) ## # A tibble: 1 x 2 ## minute n ## &lt;int&gt; &lt;int&gt; ## 1 36 16 Answer: sleepiest$guard * sleepiest_time$minute ## [1] 84636 4.2 Of all guards, which guard is most frequently asleep on the same minute? df %&gt;% filter(!begins) %&gt;% select(date_time, day, asleep, woke, guard) %&gt;% group_by(day, guard) %&gt;% padr::pad() %&gt;% ungroup() %&gt;% fill(woke, asleep) %&gt;% filter(!woke) %&gt;% mutate(minute = minute(date_time)) %&gt;% count(guard, minute, sort = TRUE) %&gt;% top_n(1) %&gt;% mutate(answer = guard * minute) ## # A tibble: 1 x 4 ## guard minute n answer ## &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 1871 49 18 91679 "],
["day5.html", "Day 5 Alchemical Reduction Instructions 5.1 How many units remain after fully reacting the polymer you scanned? 5.2 What is the length of the shortest polymer you can produce by removing all units of exactly one type and fully reacting the result?", " Day 5 Alchemical Reduction Instructions You’ve managed to sneak in to the prototype suit manufacturing lab. The Elves are making decent progress, but are still struggling with the suit’s size reduction capabilities. While the very latest in 1518 alchemical technology might have solved their problem eventually, you can do better. You scan the chemical composition of the suit’s material and discover that it is formed by extremely long polymers (one of which is available as your puzzle input). The polymer is formed by smaller units which, when triggered, react with each other such that two adjacent units of the same type and opposite polarity are destroyed. Units’ types are represented by letters; units’ polarity is represented by capitalization. For instance, r and R are units with the same type but opposite polarity, whereas r and s are entirely different types and do not react. For example: In aA, a and A react, leaving nothing behind. In abBA, bB destroys itself, leaving aA. As above, this then destroys itself, leaving nothing. In abAB, no two adjacent units are of the same type, and so nothing happens. In aabAAB, even though aa and AA are of the same type, their polarities match, and so nothing happens. Now, consider a larger example, dabAcCaCBAcCcaDA: dabAcCaCBAcCcaDA The first &#39;cC&#39; is removed. dabAaCBAcCcaDA This creates &#39;Aa&#39;, which is removed. dabCBAcCcaDA Either &#39;cC&#39; or &#39;Cc&#39; are removed (the result is the same). dabCBAcaDA No further actions can be taken. After all possible reactions, the resulting polymer contains 10 units. How many units remain after fully reacting the polymer you scanned? Time to improve the polymer. One of the unit types is causing problems; it’s preventing the polymer from collapsing as much as it should. Your goal is to figure out which unit type is causing the most problems, remove all instances of it (regardless of polarity), fully react the remaining polymer, and measure its length. For example, again using the polymer dabAcCaCBAcCcaDA from above: Removing all A/a units produces dbcCCBcCcD. Fully reacting this polymer produces dbCBcD, which has length 6. Removing all B/b units produces daAcCaCAcCcaDA. Fully reacting this polymer produces daCAcaDA, which has length 8. Removing all C/c units produces dabAaBAaDA. Fully reacting this polymer produces daDA, which has length 4. Removing all D/d units produces abAcCaCBAcCcaA. Fully reacting this polymer produces abCBAc, which has length 6. In this example, removing all C/c units was best, producing the answer 4. What is the length of the shortest polymer you can produce by removing all units of exactly one type and fully reacting the result? 5.1 How many units remain after fully reacting the polymer you scanned? Import puzzle imput for the day: input &lt;- readLines(&quot;data-raw/day5.txt&quot;, warn = FALSE) Create pattern: (small_big &lt;- str_c(letters, LETTERS, collapse = &quot;|&quot;)) ## [1] &quot;aA|bB|cC|dD|eE|fF|gG|hH|iI|jJ|kK|lL|mM|nN|oO|pP|qQ|rR|sS|tT|uU|vV|wW|xX|yY|zZ&quot; (big_small &lt;- str_c(LETTERS, letters, collapse = &quot;|&quot;)) ## [1] &quot;Aa|Bb|Cc|Dd|Ee|Ff|Gg|Hh|Ii|Jj|Kk|Ll|Mm|Nn|Oo|Pp|Qq|Rr|Ss|Tt|Uu|Vv|Ww|Xx|Yy|Zz&quot; (pattern &lt;- str_c(small_big, big_small, sep = &quot;|&quot;)) ## [1] &quot;aA|bB|cC|dD|eE|fF|gG|hH|iI|jJ|kK|lL|mM|nN|oO|pP|qQ|rR|sS|tT|uU|vV|wW|xX|yY|zZ|Aa|Bb|Cc|Dd|Ee|Ff|Gg|Hh|Ii|Jj|Kk|Ll|Mm|Nn|Oo|Pp|Qq|Rr|Ss|Tt|Uu|Vv|Ww|Xx|Yy|Zz&quot; Solve: # Run everything at once! From here -----&gt; output &lt;- input while (str_detect(output, pattern)) output &lt;- str_remove_all(output, pattern) str_length(output) # 10598 ## [1] 10598 # to here &lt;----- Check: pattern_vector &lt;- c(str_c(letters, LETTERS), str_c(LETTERS, letters)) pattern_vector %&gt;% map_lgl(~ str_detect(output, .x)) %&gt;% any() ## [1] FALSE 5.2 What is the length of the shortest polymer you can produce by removing all units of exactly one type and fully reacting the result? (units &lt;- str_c(letters, LETTERS, sep = &quot;|&quot;)) ## [1] &quot;a|A&quot; &quot;b|B&quot; &quot;c|C&quot; &quot;d|D&quot; &quot;e|E&quot; &quot;f|F&quot; &quot;g|G&quot; &quot;h|H&quot; &quot;i|I&quot; &quot;j|J&quot; &quot;k|K&quot; ## [12] &quot;l|L&quot; &quot;m|M&quot; &quot;n|N&quot; &quot;o|O&quot; &quot;p|P&quot; &quot;q|Q&quot; &quot;r|R&quot; &quot;s|S&quot; &quot;t|T&quot; &quot;u|U&quot; &quot;v|V&quot; ## [23] &quot;w|W&quot; &quot;x|X&quot; &quot;y|Y&quot; &quot;z|Z&quot; collapse_polymer &lt;- function(polymer, polarities) { output &lt;- polymer while (str_detect(output, polarities)) output &lt;- str_remove_all(output, polarities) output } ls_minus_one_unit &lt;- units %&gt;% set_names() %&gt;% map(~ str_remove_all(input, .x)) ls_minus_one_unit %&gt;% map(~ collapse_polymer(.x, pattern)) %&gt;% map_int(str_length) %&gt;% min() ## [1] 5312 "],
["day6.html", "Day 6 Alchemical Reduction Instructions 6.1 What is the size of the largest area that isn’t infinite? 6.2 What is the size of the region containing all locations which have a total distance to all given coordinates of less than 10000?", " Day 6 Alchemical Reduction Instructions The device on your wrist beeps several times, and once again you feel like you’re falling. “Situation critical,” the device announces. “Destination indeterminate. Chronal interference detected. Please specify new target coordinates.” The device then produces a list of coordinates (your puzzle input). Are they places it thinks are safe or dangerous? It recommends you check manual page 729. The Elves did not give you a manual. If they’re dangerous, maybe you can minimize the danger by finding the coordinate that gives the largest distance from the other points. Using only the Manhattan distance, determine the area around each coordinate by counting the number of integer X,Y locations that are closest to that coordinate (and aren’t tied in distance to any other coordinate). Your goal is to find the size of the largest area that isn’t infinite. For example, consider the following list of coordinates: 1, 1 1, 6 8, 3 3, 4 5, 5 8, 9 If we name these coordinates A through F, we can draw them on a grid, putting 0,0 at the top left: .......... .A........ .......... ........C. ...D...... .....E.... .B........ .......... .......... ........F. This view is partial - the actual grid extends infinitely in all directions. Using the Manhattan distance, each location’s closest coordinate can be determined, shown here in lowercase: aaaaa.cccc aAaaa.cccc aaaddecccc aadddeccCc ..dDdeeccc bb.deEeecc bBb.eeee.. bbb.eeefff bbb.eeffff bbb.ffffFf Locations shown as . are equally far from two or more coordinates, and so they don’t count as being closest to any. In this example, the areas of coordinates A, B, C, and F are infinite - while not shown here, their areas extend forever outside the visible grid. However, the areas of coordinates D and E are finite: D is closest to 9 locations, and E is closest to 17 (both including the coordinate’s location itself). Therefore, in this example, the size of the largest area is 17. ** What is the size of the largest area that isn’t infinite?** On the other hand, if the coordinates are safe, maybe the best you can do is try to find a region near as many coordinates as possible. For example, suppose you want the sum of the Manhattan distance to all of the coordinates to be less than 32. For each location, add up the distances to all of the given coordinates; if the total of those distances is less than 32, that location is within the desired region. Using the same coordinates as above, the resulting region looks like this: .......... .A........ .......... ...###..C. ..#D###... ..###E#... .B.###.... .......... .......... ........F. In particular, consider the highlighted location 4,3 located at the top middle of the region. Its calculation is as follows, where abs() is the absolute value function: Distance to coordinate A: abs(4-1) + abs(3-1) = 5 Distance to coordinate B: abs(4-1) + abs(3-6) = 6 Distance to coordinate C: abs(4-8) + abs(3-3) = 4 Distance to coordinate D: abs(4-3) + abs(3-4) = 2 Distance to coordinate E: abs(4-5) + abs(3-5) = 3 Distance to coordinate F: abs(4-8) + abs(3-9) = 10 Total distance: 5 + 6 + 4 + 2 + 3 + 10 = 30 Because the total distance to all coordinates (30) is less than 32, the location is within the region. This region, which also includes coordinates D and E, has a total size of 16. Your actual region will need to be much larger than this example, though, instead including all locations with a total distance of less than 10000. ** What is the size of the region containing all locations which have a total distance to all given coordinates of less than 10000?** 6.1 What is the size of the largest area that isn’t infinite? Import puzzle imput for the day: input &lt;- read_csv(&quot;data-raw/day6.txt&quot;, col_names = c(&quot;x&quot;, &quot;y&quot;)) ## Parsed with column specification: ## cols( ## x = col_integer(), ## y = col_integer() ## ) dim_grid &lt;- input %&gt;% summarise_all(c(&quot;min&quot;, &quot;max&quot;)) grid &lt;- dim_grid %&gt;% {list(&quot;x&quot; = seq(.$x_min, .$x_max), &quot;y&quot; = seq(.$y_min, .$y_max))} %&gt;% cross_df() %&gt;% anti_join(input) # remove the coordinates from the input # What is (are) the closest location(s) to a given point in the grid? (grid_i &lt;- grid[1, ]) ## # A tibble: 1 x 2 ## x y ## &lt;int&gt; &lt;int&gt; ## 1 42 40 input %&gt;% mutate( x2 = grid_i$x, y2 = grid_i$y, dist = abs(x - x2) + abs(y - y2) ) %&gt;% filter(dist == min(dist)) ## # A tibble: 1 x 5 ## x y x2 y2 dist ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 42 52 42 40 12 # Let&#39;s do this for every point in the grid get_closest_locations &lt;- function(x2, y2) { input %&gt;% mutate( x2 = x2, y2 = y2, dist = abs(x - x2) + abs(y - y2) ) %&gt;% filter(dist == min(dist)) } grid_min_dists &lt;- grid %&gt;% pmap(get_closest_locations) %&gt;% keep(~ nrow(.) == 1) %&gt;% bind_rows() # Hmm... This won&#39;t remove the infinite one ==&gt; TOO HIGH! grid_min_dists2 &lt;- grid_min_dists %&gt;% group_by(x2, y2) %&gt;% mutate(n = n()) %&gt;% ungroup() %&gt;% filter(n == 1) %&gt;% count(x, y, sort = TRUE) %&gt;% top_n(1) candidates &lt;- grid_min_dists %&gt;% group_by(x, y) %&gt;% summarise_at(c(&quot;x2&quot;, &quot;y2&quot;), c(&quot;min&quot;, &quot;max&quot;)) %&gt;% ungroup() %&gt;% mutate( x_max_bounded = x2_max &lt; max(x2_max), y_max_bounded = y2_max &lt; max(y2_max), x_min_bounded = x2_min &gt; min(x2_min), y_min_bounded = y2_min &gt; min(y2_min), n_bounds = x_max_bounded + y_max_bounded + x_min_bounded + y_min_bounded ) %&gt;% filter(n_bounds == 4) grid_min_dists %&gt;% semi_join(candidates, by = c(&quot;x&quot;, &quot;y&quot;)) %&gt;% count(x, y, sort = TRUE) %&gt;% slice(1) %&gt;% pull(n) %&gt;% `+`(1) # because the fucking origin location counts! ## [1] 2342 # Another logic: let&#39;s get the 4 points that are the furthest way from each # other. These should give me the bounds of my section. 6.2 What is the size of the region containing all locations which have a total distance to all given coordinates of less than 10000? grid &lt;- dim_grid %&gt;% {list(&quot;x&quot; = seq(.$x_min, .$x_max), &quot;y&quot; = seq(.$y_min, .$y_max))} %&gt;% cross_df() grid_i &lt;- grid[1, ] input %&gt;% summarise(sum_dist = sum(abs(x - grid_i$x) + abs(y - grid_i$y))) ## # A tibble: 1 x 1 ## sum_dist ## &lt;int&gt; ## 1 15072 get_sumdist_to_all_locations &lt;- function(x2, y2) { sum(abs(input$x - x2) + abs(input$y - y2)) } grid_sumdist &lt;- grid %&gt;% mutate(sumdist = pmap_int(., get_sumdist_to_all_locations)) %&gt;% filter(sumdist &lt; 10000) # Check for gaps grid_sumdist %&gt;% count(x) %&gt;% arrange(n) ## # A tibble: 224 x 2 ## x n ## &lt;int&gt; &lt;int&gt; ## 1 80 10 ## 2 303 23 ## 3 81 33 ## 4 302 37 ## 5 82 50 ## 6 301 50 ## 7 300 62 ## 8 83 65 ## 9 299 70 ## 10 84 74 ## # ... with 214 more rows grid_sumdist %&gt;% count(y) %&gt;% arrange(n) ## # A tibble: 240 x 2 ## y n ## &lt;int&gt; &lt;int&gt; ## 1 309 34 ## 2 70 43 ## 3 71 53 ## 4 308 53 ## 5 72 61 ## 6 307 62 ## 7 73 68 ## 8 306 71 ## 9 74 75 ## 10 305 79 ## # ... with 230 more rows grid_sumdist %&gt;% distinct(x, y) %&gt;% nrow() ## [1] 43302 "]
]
